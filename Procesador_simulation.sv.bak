`timescale 1ns/1ps

module Procesador_simulation;
  // Parámetros
  parameter m = 8;

  // Entradas y salidas
  logic [1:0]   A_sel, B_sel, D_sel, H_sel;
  logic [m-1:0] Cons_IN, Data_IN;
  logic [3:0]   G_sel;
  logic         MB_sel, MD_sel, MF_sel;
  logic         Load_en;
  logic [m-1:0] Address_out, Data_out;
  logic [3:0]   Tags;

  // Clock
  bit clk;

  // Instanciar el módulo Procesador
  Procesador #(m) procesador (
    .A_sel(A_sel),
    .B_sel(B_sel),
    .D_sel(D_sel),
    .H_sel(H_sel),
    .Cons_IN(Cons_IN),
    .G_sel(G_sel),
    .MB_sel(MB_sel),
    .MD_sel(MD_sel),
    .MF_sel(MF_sel),
    .Load_en(Load_en),
    .Data_IN(Data_IN),
    .Address_out(Address_out),
    .Data_out(Data_out),
    .Tags(Tags)
  );

  // Generador de clock
  always #5 clk = ~clk;

  // Inicialización
  initial begin
    A_sel = 2'b00;
    B_sel = 2'b00;
    D_sel = 2'b00;
    H_sel = 2'b00;
    Cons_IN = 0;
    Data_IN = 0;
    G_sel = 4'b0000;
    MB_sel = 1'b0;
    MD_sel = 1'b0;
    MF_sel = 1'b0;
    Load_en = 1'b0;

    #10;

    // Aplicar estímulos 1
    A_sel = 2'b01;
    B_sel = 2'b01;
    D_sel = 2'b01;
    H_sel = 2'b01;
    Cons_IN = 2;
    Data_IN = 2;
    G_sel = 4'b0001;
    MB_sel = 1'b1;
    MD_sel = 1'b1;
    MF_sel = 1'b1;
    Load_en = 1'b1;

    #200;

    // Aplicar estímulos 2
    A_sel = 2'b01;
    B_sel = 2'b01;
    D_sel = 2'b01;
    H_sel = 2'b01;
    Cons_IN = 3;
    Data_IN = 3;
    G_sel = 4'b0001;
    MB_sel = 1'b1;
    MD_sel = 1'b1;
    MF_sel = 1'b1;
    Load_en = 1'b0;

    #200;

    // Aplicar estímulos 3
    A_sel = 2'b00;
    B_sel = 2'b00;
    D_sel = 2'b00;
    H_sel = 2'b00;
    Cons_IN = 4;
    Data_IN = 4;
    G_sel = 4'b0010;
    MB_sel = 1'b1;
    MD_sel = 1'b1;
    MF_sel = 1'b1;
    Load_en = 1'b1;

    #200;

    // Otros estímulos o pruebas adicionales aquí

    $finish; // Finalizar la simulación
  end

endmodule

